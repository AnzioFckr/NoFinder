{"version":3,"file":"steam-games.worker-DXB1vbxe.js","sources":["../../src/main/workers/steam-games.worker.ts"],"sourcesContent":["import { SteamGame } from \"@types\";\nimport { orderBy, slice } from \"lodash-es\";\nimport flexSearch from \"flexsearch\";\nimport fs from \"node:fs\";\n\nimport { formatName } from \"@shared\";\nimport { workerData } from \"node:worker_threads\";\n\nconst steamGamesIndex = new flexSearch.Index({\n  tokenize: \"reverse\",\n});\n\nconst { steamGamesPath } = workerData;\n\nconst data = fs.readFileSync(steamGamesPath, \"utf-8\");\n\nconst steamGames = JSON.parse(data) as SteamGame[];\n\nfor (let i = 0; i < steamGames.length; i++) {\n  const steamGame = steamGames[i];\n\n  const formattedName = formatName(steamGame.name);\n\n  steamGamesIndex.add(i, formattedName);\n}\n\nexport const search = (options: flexSearch.SearchOptions) => {\n  const results = steamGamesIndex.search(options);\n  const games = results.map((index) => steamGames[index]);\n\n  return orderBy(games, [\"name\"], [\"asc\"]);\n};\n\nexport const getById = (id: number) =>\n  steamGames.find((game) => game.id === id);\n\nexport const list = ({ limit, offset }: { limit: number; offset: number }) =>\n  slice(steamGames, offset, offset + limit);\n"],"names":["steamGamesIndex","flexSearch","Index","tokenize","steamGamesPath","workerData","data","fs","readFileSync","steamGames","JSON","parse","i","length","steamGame","formattedName","formatName","name","add","search","options","results","games","map","index","orderBy","getById","id","find","game","list","limit","offset","slice"],"mappings":";;;;;;AAQA,KAAA,CAAMA,eAAkB,CAAA,CAAA,CAAA,GAAA,CAAIC,UAAWC,CAAAA,KAAK,CAAC,CAAA;CAC3CC,CAAAA,CAAAA,CAAAA,QAAU,EAAA,CAAA,OAAA,CAAA;AACZ,CAAA,CAAA,CAAA;AAEA,KAAA,CAAM,CAAEC,CAAAA,cAAc,CAAE,CAAA,CAAA,CAAA,CAAGC,UAAAA,CAAAA;AAE3B,KAAMC,CAAAA,IAAOC,CAAAA,CAAAA,CAAAA,EAAAA,CAAGC,YAAY,CAACJ,cAAgB,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAE7C,KAAMK,CAAAA,UAAAA,GAAaC,IAAKC,CAAAA,KAAK,CAACL,IAAAA,CAAAA,CAAAA;AAE9B,GAAA,CAAK,GAAIM,CAAAA,CAAI,CAAA,CAAA,CAAA,CAAA,CAAGA,CAAAA,EAAIH,CAAAA,CAAAA,UAAWI,CAAAA,MAAM,CAAED,CAAAA,CAAK,EAAA,CAAA,CAAA;IAC1C,MAAME,SAAAA,CAAAA,CAAAA,CAAYL,UAAU,CAACG,CAAE,CAAA,CAAA;CAE/B,CAAA,CAAA,CAAA,KAAA,CAAMG,aAAAA,CAAgBC,CAAAA,CAAAA,UAAWF,CAAAA,SAAAA,CAAUG,IAAI,CAAA,CAAA;CAE/CjB,CAAAA,CAAAA,CAAAA,eAAgBkB,CAAAA,GAAG,CAACN,CAAGG,CAAAA,CAAAA,aAAAA,CAAAA,CAAAA;AACzB,CAAA;AAEO,KAAA,CAAMI,SAAS,CAACC,OAAAA,CAAAA,CAAAA,CAAAA,CAAAA;CACrB,CAAA,CAAA,CAAA,KAAA,CAAMC,OAAAA,CAAUrB,CAAAA,CAAAA,eAAgBmB,CAAAA,MAAM,CAACC,OAAAA,CAAAA,CAAAA;IACvC,KAAME,CAAAA,KAAAA,CAAQD,CAAAA,CAAAA,QAAQE,GAAG,CAAC,CAACC,KAAUf,GAAAA,UAAU,CAACe,KAAM,CAAA,CAAA,CAAA;AAEtD,CAAA,CAAA,CAAA,CAAA,MAAOC,CAAAA,QAAQH,KAAO,CAAA,CAAA,CAAA;AAAC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA;KAAO,CAAE,CAAA,CAAA;AAAC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA;AAAM,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACzC,CAAE,CAAA;AAEWI,KAAAA,CAAAA,OAAAA,CAAU,CAAA,CAAA,CAACC,EAAAA,CAAAA,CAAAA,CACtBlB,UAAWmB,CAAAA,IAAI,CAAC,CAACC,IAASA,CAAAA,CAAAA,CAAAA,IAAAA,CAAKF,EAAE,CAAA,CAAA,CAAA,CAAA,CAAKA,EAAI,CAAA,CAAA;AAE/BG,KAAAA,CAAAA,IAAAA,CAAO,CAAA,CAAA,CAAC,CAAEC,CAAAA,KAAK,EAAEC,MAAM,CAAA,CAAqC,CACvEC,CAAAA,CAAAA,KAAAA,CAAMxB,UAAYuB,CAAAA,CAAAA,MAAAA,CAAQA,CAAAA,SAASD,KAAO,CAAA,CAAA;;"}